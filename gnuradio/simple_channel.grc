options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: simple_channel
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Simple Channel Model
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: attenuation
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 8.0]
    rotation: 0
    state: enabled
- name: carrier_freq
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 8.0]
    rotation: 0
    state: enabled
- name: delay
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 8.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, center_frequency=0.0,\
      \ attenuation=1.0, delay=0.0):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='simple channel',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.center_frequency=center_frequency\n\
      \        self.attenuation = attenuation\n        self.delay=delay\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        output_items[0][:] = input_items[0] * self.attenuation\
      \ * np.exp(2*np.pi*self.delay*self.center_frequency*1.0j)\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    attenuation: attenuation
    center_frequency: carrier_freq
    comment: ''
    delay: delay
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('simple channel', 'blk', [('center_frequency', '0.0'), ('attenuation',
      '1.0'), ('delay', '0.0')], [('0', 'complex', 1)], [('0', 'complex', 1)], 'Embedded
      Python Block example - a simple multiply const', ['attenuation', 'center_frequency',
      'delay'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 152.0]
    rotation: 0
    state: enabled
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 248.0]
    rotation: 0
    state: enabled
- name: pad_source_1
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 216.0]
    rotation: 0
    state: enabled

connections:
- [epy_block_0, '0', pad_sink_0, '0']
- [pad_source_1, '0', epy_block_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.11.0
